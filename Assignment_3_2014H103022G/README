Nikhil Vyas (2014H103022G) (h2014022@goa.bits-pilani.ac.in)

Assignment 3, Advanced Operating Systems (CS G623)



==================================================================================================================
================================================Question 1========================================================
==================================================================================================================

==================USAGE========================

1) Compilation: make OR gcc soln.c -l pthread -o prog
2) Execution: ./prog <input_filename>

					OR

   Use test.sh; ./test.sh
   
=============Program Structure=================

1) Read the input file to populate ni, na, inp[], arr[][]
2) Initialize the root node with [0,0]; Continue only if it matches inp[0]
3) Initialize root node with (0, 0)
4) Initialize a packet with root & the neighbouring element indexes & current input array position.
5) Create three threads for checking the element Below, Right & Diagonal respectively. Send packet as arg.
6) In threads ->
	i) Initialize the packet p with arg.
	ii) If the element at current index doesn't match the matrix element, return 0
	ii) Else, initialize a node & make it the child of the p->data node. Now repeat 5) for neighbouring elements
	iii) Join & get the exit statuses of the threads.
	iv) If any of them is 1, return 1. Else return 0. (Return 1 in case of destination node)
7) Join & retreive the exit status of the initial three threads in main thread.
8) If any of them is 1, call print_paths() with root as arg.
9) Else, no path exists.

NOTE: Further details are in code as comments.

===============Files & Sub-directories for Question 1=================

soln.c
	--The main program, source.

test.sh
	--Script with make & execution with some user input.
	--Usage ./test.sh(needs +x)

helper.c
	--structs & helper functions

makefile
	--makefile

in, in2, in3
	--Sample input files
	
	
	

	
==================================================================================================================
================================================Question 2========================================================
==================================================================================================================

==================USAGE========================

1) Compilation: make OR gcc soln.c -l pthread -o prog
2) Execution: ./prog <input_filename>

					OR

   Use test.sh; ./test.sh
   
=============Program Structure=================

struct complex: int a (Real) , int b (Imaginary)

1) Read the input file & populate the in[] array holding complex structs
2) Loop until n is equal to 1.
	i)If n is odd, set is_odd = 1
	ii) Set n = n/2, i.e., n = (floor(n/2))
	iii) Loop for i = 0 to n
		a) Initialize packet p with the complex numbers from 2*i & 2*i + 1, & i.
		b) Create the thread.
	iv) Join all the threads.
	v) if is_odd is 1, copy complex number at 2*n to n & increment n.
3) Print in[0], which is the final result.

comp_mul: Thread function which uses packet p to get the complex numbers & stores the result at p->n

===============Files & Sub-directories for Question 2=================

soln.c
	--The main program, source.

test.sh
	--Script with make & execution with some user input.
	--Usage ./test.sh(needs +x)

helper.c
	--structs & helper functions

makefile
	--makefile

in, in2, in3
	--Sample input files
	
	
	
	

==================================================================================================================
================================================Question 3========================================================
==================================================================================================================
==================USAGE========================

1) Compilation: make OR gcc soln.c -l pthread -o prog
2) Execution: ./prog <number1> <number2>

					OR

   Use test.sh; ./test.sh
   
=============Program Structure=================

1) If digits in n1 & n2 are not equal, return.
2) Calculate the number of threads. nt = 2* digits(n1) - 1
3) Initialize the packet with n1 & n2(could have been used globally too) & i. (i=0 for the rightmost column)
In threads->
	i) loop i = 0 to digits(n1)
		a) Calculate offset = dig(column number) - i
		b) if 0 <= offset < digits(n1), add the multiplication of offset'th digit of n1 & i'th digit of n2 to sum_of_mult
	ii) Set dig'th element of result array(res[]) = sum_of_mult
4) Start from right & calculate carry forwards & final result.
5) Print res[] elements in reverse order(since 0 was right).

===============Files & Sub-directories for Question 2=================

soln.c
	--The main program, source.

test.sh
	--Script with make & execution with some user input.
	--Usage ./test.sh(needs +x)

helper.c
	--structs & helper functions

makefile
	--makefile
	
===================KNOWN Bugs/Limitations(For all three)================================

-No exception handling.
-Assumes the input is in correct format.
